# Ultimate Quantum Mempool Monitor - Production Dockerfile
# Multi-stage build for optimized production deployment

# Build stage
FROM python:3.11-slim as builder

# Set build environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    pkg-config \
    libssl-dev \
    libffi-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install -r requirements.txt

# Install additional dependencies for the ultimate integration
RUN pip install \
    jinja2 \
    uvicorn[standard] \
    fastapi \
    websockets \
    redis \
    aioredis

# Production stage
FROM python:3.11-slim as production

# Set runtime environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    QUANTUM_ENV=production \
    PYTHONPATH=/app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create non-root user for security
RUN groupadd -r quantum && useradd -r -g quantum quantum

# Create application directory
WORKDIR /app

# Copy application code
COPY src/ ./src/
COPY config/ ./config/
COPY dashboard/ ./dashboard/
COPY ultimate_unified_integration.py .
COPY docker-entrypoint-ultimate.sh .

# Create necessary directories with proper permissions
RUN mkdir -p logs data dashboard/static dashboard/templates nginx && \
    chown -R quantum:quantum /app && \
    chmod +x docker-entrypoint-ultimate.sh

# Switch to non-root user
USER quantum

# Health check for the ultimate monitoring system
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Expose ports
# 8000: Main FastAPI application
# 8001: Dashboard (if separate)
# 8765: WebSocket API
# 9090: Prometheus metrics (if enabled)
EXPOSE 8000 8001 8765 9090

# Set entrypoint
ENTRYPOINT ["./docker-entrypoint-ultimate.sh"]

# Default command - run the ultimate integration
CMD ["python", "ultimate_unified_integration.py"]
