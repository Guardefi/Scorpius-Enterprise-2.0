# Ultimate Quantum Mempool Monitor - Production Docker Compose
version: '3.8'

services:
  # Main application service
  quantum-monitor:
    build:
      context: .
      dockerfile: Dockerfile.ultimate
      target: production
    container_name: ultimate-quantum-monitor
    restart: unless-stopped
    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # Dashboard
      - "8765:8765"  # WebSocket
      - "9090:9090"  # Metrics
    environment:
      - QUANTUM_ENV=production
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=quantum_mempool
      - POSTGRES_USER=quantum_user
      - POSTGRES_PASSWORD=quantum_secure_password_2024
    volumes:
      - quantum_logs:/app/logs
      - quantum_data:/app/data
      - quantum_config:/app/config
      - ./config/unified-config.yaml:/app/config/unified-config.yaml:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass quantum_redis_2024
    volumes:
      - quantum_redis_data:/data
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=quantum_mempool
      - POSTGRES_USER=quantum_user
      - POSTGRES_PASSWORD=quantum_secure_password_2024
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - quantum_postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum_user -d quantum_mempool"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - quantum_logs:/var/log/nginx
    depends_on:
      - quantum-monitor
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - quantum_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quantum-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=quantum_grafana_2024
    volumes:
      - quantum_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - quantum-network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  quantum_logs:
    driver: local
  quantum_data:
    driver: local
  quantum_config:
    driver: local
  quantum_redis_data:
    driver: local
  quantum_postgres_data:
    driver: local
  quantum_prometheus_data:
    driver: local
  quantum_grafana_data:
    driver: local

# Network for service communication
networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
      dockerfile: Dockerfile
    container_name: ultimate-quantum-mempool
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - prometheus
    environment:
      - QUANTUM_ENV=production
      - DATABASE_URL=postgresql://quantum_user:${POSTGRES_PASSWORD:-quantum_pass123}@postgres:5432/quantum_monitor
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_URL=http://prometheus:9090
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WEBSOCKET_PORT=8765
      - DASHBOARD_PORT=8001
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - quantum_data:/app/data
    ports:
      - "8000:8000"   # API
      - "8765:8765"   # WebSocket
      - "8001:8001"   # Dashboard
      - "9090:9090"   # Metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - quantum-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=quantum_monitor
      - POSTGRES_USER=quantum_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-quantum_pass123}
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum_user -d quantum_monitor"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quantum-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quantum-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana_admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-grafana_secret_key}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quantum-network

  # Elasticsearch for SIEM
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: quantum-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elastic_pass123}
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f -u elastic:${ELASTIC_PASSWORD:-elastic_pass123} http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quantum-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: quantum-kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-elastic_pass123}
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - quantum-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    restart: unless-stopped
    depends_on:
      - ultimate-quantum-monitor
      - grafana
      - kibana
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger Tracing (Optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quantum-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - quantum-network

  # MinIO for Object Storage (Optional)
  minio:
    image: minio/minio:latest
    container_name: quantum-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - quantum-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  quantum_data:
    driver: local
  nginx_logs:
    driver: local
  minio_data:
    driver: local

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check and monitoring endpoints:
# - Application API: http://localhost:8000/api/v1/health
# - Application Dashboard: http://localhost:8001
# - Grafana: http://localhost:3000 (admin/grafana_admin123)
# - Kibana: http://localhost:5601
# - Prometheus: http://localhost:9091
# - Jaeger: http://localhost:16686
# - MinIO: http://localhost:9001 (minioadmin/minioadmin123)
