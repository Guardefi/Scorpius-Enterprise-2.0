version: "3.8"

x-common-env: &common-env
  LOG_LEVEL: INFO
  PYTHONUNBUFFERED: "1"

services:
  quantum-monitor:
    image: ultimate-quantum-monitor:latest
    container_name: quantum-monitor
    environment:
      <<: *common-env
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: quantum_monitor
      POSTGRES_USER: quantum_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "8002:8000"   # changed host port to avoid conflict
      - "8082:8080"   # changed host port to avoid conflict
      - "3004:3000"   # changed host port to avoid conflict
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [quantum-network]

  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: quantum_monitor
      POSTGRES_USER: quantum_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum_user -d quantum_monitor"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5434:5432"   # changed host port to avoid conflict
    networks: [quantum-network]

  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    ports:
      - "6381:6379"   # changed host port to avoid conflict
    networks: [quantum-network]

# --- replace your current prometheus service with this ---
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=365d
      - --web.enable-lifecycle
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro   # ‚Üê folder-to-folder mount
      - prometheus_data:/prometheus
    ports:
      - "9096:9090"   # changed host port to avoid conflict
    networks: [quantum-network]
# ----------------------------------------------------------


  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports: ["3002:3000"]   # changed host port to avoid conflict
    networks: [quantum-network]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: quantum-elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms2g -Xmx2g
      xpack.security.enabled: "true"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports: ["9202:9200"]   # changed host port to avoid conflict
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks: [quantum-network]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: quantum-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
    depends_on: [elasticsearch]
    ports: ["5602:5601"]   # changed host port to avoid conflict
    networks: [quantum-network]

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quantum-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    restart: unless-stopped
    ports:
      - "16687:16686"   # changed host port to avoid conflict
      - "14269:14268"   # changed host port to avoid conflict
      - "14251:14250"   # changed host port to avoid conflict
    networks: [quantum-network]

  nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    restart: unless-stopped
    depends_on:
      - quantum-monitor
      - grafana
      - kibana
    ports:
      - "81:80"     # changed host port to avoid conflict
      - "444:443"   # changed host port to avoid conflict
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./nginx/ssl:/etc/nginx/ssl:ro  # commented out until SSL certs are set up
    networks: [quantum-network]

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  quantum-network:
    driver: bridge

