# Docker Compose configuration for Quantum Scanner + Scorpius Integration
#
# This configuration orchestrates both the Quantum Scanner and Scorpius
# microservices for seamless integration.

version: '3.8'

services:
  # Quantum Scanner Service
  quantum-scanner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantum-scanner
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:///./quantum_scanner.db
      - LOG_LEVEL=INFO
      - CBOM_DEEP_SCAN=true
      - AI_MODEL_PATH=/app/models
      - QUANTUM_THRESHOLD=0.7
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - quantum_data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - scanner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Scorpius AI Orchestrator (assumes it exists at specified path)
  scorpius-orchestrator:
    build:
      context: ../scorpius-microservices/scanner-ai-orchestrator
      dockerfile: Dockerfile
    container_name: scorpius-orchestrator
    ports:
      - "8001:8000"  # Different port to avoid conflict
    environment:
      - QUANTUM_SCANNER_URL=http://quantum-scanner:8000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://scorpius:scorpius123@postgres:5432/scorpius
      - LOG_LEVEL=INFO
    volumes:
      - ./integration:/app/integration
      - scorpius_data:/app/data
    depends_on:
      - redis
      - postgres
      - quantum-scanner
    networks:
      - scanner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: scanner-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scanner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: scanner-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=quantum_scanner
      - POSTGRES_USER=quantum
      - POSTGRES_PASSWORD=quantum123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - scanner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum -d quantum_scanner"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Nginx as reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: scanner-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - quantum-scanner
      - scorpius-orchestrator
    networks:
      - scanner-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: scanner-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - scanner-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: scanner-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - scanner-network
    restart: unless-stopped

volumes:
  quantum_data:
    driver: local
  scorpius_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  scanner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
