[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quantum-security-platform"
version = "1.0.0"
description = "Enterprise Quantum-Ready Vulnerability Scanner with 10-Pillar Architecture"
authors = [
    {name = "Quantum Security Team", email = "team@quantum-security.io"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security :: Cryptography",
    "Topic :: System :: Systems Administration",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "asyncio-mqtt>=0.13.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "cryptography>=41.0.0",
    "pycryptodome>=3.19.0",
    "py-ecc>=6.0.0",
    "liboqs-python>=0.8.0",
    "pqcrypto>=0.3.2",
    "cyclonedx-python-lib>=6.4.0",
    "networkx>=3.2.1",
    "neo4j>=5.13.0",
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    "scikit-learn>=1.3.0",
    "plotly>=5.17.0",
    "dash>=2.14.0",
    "kubernetes>=28.1.0",
    "docker>=6.1.0",
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]
test = [
    "httpx>=0.25.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "faker>=19.10.0",
]

[project.urls]
Homepage = "https://github.com/quantum-security/quantum-scanner"
Documentation = "https://quantum-security.readthedocs.io"
Repository = "https://github.com/quantum-security/quantum-scanner.git"
"Bug Tracker" = "https://github.com/quantum-security/quantum-scanner/issues"

[project.scripts]
qscan = "quantum_scanner.cli:main"
qscan-cbom = "quantum_scanner.services.cbom:cli"
qscan-attack-sim = "quantum_scanner.services.attack_simulator:cli"
qscan-dashboard = "quantum_scanner.services.dashboard:cli"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
