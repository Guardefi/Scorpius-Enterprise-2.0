import { z } from 'zod';
import { ExploitTestingServiceApi } from './api';

// Basic schemas (extend these based on your OpenAPI spec)
export const HealthResponseSchema = z.object({
  status: z.string(),
  timestamp: z.string(),
});

// Type exports
export type HealthResponse = z.infer<typeof HealthResponseSchema>;

// Endpoint functions
export class ExploitTestingServiceEndpoints {
  constructor(private api: ExploitTestingServiceApi) {}

  /**
   * Health check endpoint
   * GET /health
   */
  async getHealth(): Promise<any> {
    const response = await this.api.request<any>({
      method: 'GET',
      url: `/health`,
    });
    
    return response;
  }
  /**
   * Run exploit test against target
   * POST /exploit/test
   */
  async postExploitTest(requestBody: any): Promise<any> {
    const response = await this.api.request<any>({
      method: 'POST',
      url: `/exploit/test`,
      data: requestBody,
    });
    
    return response;
  }
  /**
   * Get available exploit payloads
   * GET /exploit/payloads
   */
  async getExploitPayloads(queryParams?: Record<string, any>): Promise<any> {
    const response = await this.api.request<any>({
      method: 'GET',
      url: `/exploit/payloads`,
      params: queryParams,
    });
    
    return response;
  }
  /**
   * Get exploit test results
   * GET /exploit/results/{testId}
   */
  async getExploitResultsTestId(testId: string): Promise<any> {
    const response = await this.api.request<any>({
      method: 'GET',
      url: `/exploit/results/${encodeURIComponent(testId)}`,
    });
    
    return response;
  }
}