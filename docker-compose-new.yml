name: scorpius-enterprise-platform

services:
  # =============================================================================
  # CORE INFRASTRUCTURE
  # =============================================================================
  
  postgres:
    image: postgres:16-alpine
    container_name: scorpius-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-scorpius}
      POSTGRES_USER: ${POSTGRES_USER:-scorpius}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scorpius_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - scorpius-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-scorpius} -d ${POSTGRES_DB:-scorpius}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: scorpius-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-scorpius123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - scorpius-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # AUTHENTICATION & AUTHORIZATION
  # =============================================================================

  keycloak:
    image: quay.io/keycloak/keycloak:23
    container_name: scorpius-keycloak
    command: ["start", "--optimized"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-scorpius}
      KC_DB_USERNAME: ${POSTGRES_USER:-scorpius}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-scorpius_secure_2024}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
    ports:
      - "${KEYCLOAK_PORT:-8090}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - keycloak_data:/opt/keycloak/data

  # =============================================================================
  # CORE SERVICES
  # =============================================================================

  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: scorpius-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - KEYCLOAK_URL=http://keycloak:8080
      - PROMETHEUS_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - JWT_SECRET=${JWT_SECRET:-scorpius-secret-key-2024}
    volumes:
      - ./logs/api-gateway:/app/logs
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - scorpius-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # BLOCKCHAIN & MEMPOOL SERVICES
  # =============================================================================

  mempool-service:
    build:
      context: ./backend/mempool-service
      dockerfile: Dockerfile
    container_name: scorpius-mempool
    ports:
      - "${MEMPOOL_PORT:-8010}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - ETH_RPC_URL=${ETH_RPC_URL:-https://mainnet.infura.io/v3/your-project-id}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/mempool:/app/logs

  bridge-service:
    build:
      context: ./backend/bridge-service
      dockerfile: Dockerfile
    container_name: scorpius-bridge
    ports:
      - "${BRIDGE_PORT:-8011}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/bridge:/app/logs

  bytecode-service:
    build:
      context: ./backend/bytecode-service
      dockerfile: Dockerfile
    container_name: scorpius-bytecode
    ports:
      - "${BYTECODE_PORT:-8012}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/bytecode:/app/logs

  # =============================================================================
  # MEV & SECURITY SERVICES
  # =============================================================================

  mev-bot-service:
    build:
      context: ./backend/mev-bot-service
      dockerfile: Dockerfile
    container_name: scorpius-mev-bot
    ports:
      - "${MEV_BOT_PORT:-8020}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - ETH_RPC_URL=${ETH_RPC_URL:-https://mainnet.infura.io/v3/your-project-id}
      - PRIVATE_KEY=${MEV_PRIVATE_KEY:-your-private-key}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/mev-bot:/app/logs

  mev-protection-service:
    build:
      context: ./backend/mev-protection-service
      dockerfile: Dockerfile
    container_name: scorpius-mev-protection
    ports:
      - "${MEV_PROTECTION_PORT:-8021}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/mev-protection:/app/logs

  wallet-guard-service:
    build:
      context: ./backend/wallet-guard-service
      dockerfile: Dockerfile
    container_name: scorpius-wallet-guard
    ports:
      - "${WALLET_GUARD_PORT:-8022}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/wallet-guard:/app/logs

  honeypot-service:
    build:
      context: ./backend/honeypot-service
      dockerfile: Dockerfile
    container_name: scorpius-honeypot
    ports:
      - "${HONEYPOT_PORT:-8023}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/honeypot:/app/logs

  # =============================================================================
  # QUANTUM & AI SERVICES
  # =============================================================================

  quantum-service:
    build:
      context: ./backend/quantum-service
      dockerfile: Dockerfile
    container_name: scorpius-quantum
    ports:
      - "${QUANTUM_PORT:-8030}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/quantum:/app/logs

  quantum-crypto-service:
    build:
      context: ./backend/quantum-crypto-service
      dockerfile: Dockerfile
    container_name: scorpius-quantum-crypto
    ports:
      - "${QUANTUM_CRYPTO_PORT:-8031}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/quantum-crypto:/app/logs

  ai-forensics-service:
    build:
      context: ./backend/ai-forensics-service
      dockerfile: Dockerfile
    container_name: scorpius-ai-forensics
    ports:
      - "${AI_FORENSICS_PORT:-8032}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/ai-forensics:/app/logs

  simulation-service:
    build:
      context: ./backend/simulation-service
      dockerfile: Dockerfile
    container_name: scorpius-simulation
    ports:
      - "${SIMULATION_PORT:-8033}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/simulation:/app/logs

  # =============================================================================
  # ADDITIONAL SERVICES
  # =============================================================================

  time-machine-service:
    build:
      context: ./backend/time-machine-service
      dockerfile: Dockerfile
    container_name: scorpius-time-machine
    ports:
      - "${TIME_MACHINE_PORT:-8040}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/time-machine:/app/logs
      - time_machine_data:/app/data

  reporting-service:
    build:
      context: ./backend/reporting-service
      dockerfile: Dockerfile
    container_name: scorpius-reporting
    ports:
      - "${REPORTING_PORT:-8041}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/reporting:/app/logs
      - reporting_data:/app/data

  exploit-testing-service:
    build:
      context: ./backend/exploit-testing-service
      dockerfile: Dockerfile
    container_name: scorpius-exploit-testing
    ports:
      - "${EXPLOIT_TESTING_PORT:-8042}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/exploit-testing:/app/logs

  integration-hub:
    build:
      context: ./backend/integration-hub
      dockerfile: Dockerfile
    container_name: scorpius-integration-hub
    ports:
      - "${INTEGRATION_HUB_PORT:-8043}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius123}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/integration-hub:/app/logs

  settings-service:
    build:
      context: ./backend/settings-service
      dockerfile: Dockerfile
    container_name: scorpius-settings
    ports:
      - "${SETTINGS_PORT:-8044}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scorpius}:${POSTGRES_PASSWORD:-scorpius_secure_2024}@postgres:5432/${POSTGRES_DB:-scorpius}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    volumes:
      - ./logs/settings:/app/logs

  # =============================================================================
  # FRONTEND
  # =============================================================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: scorpius-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
      - VITE_WS_BASE_URL=${VITE_WS_BASE_URL:-ws://localhost:8000}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-Scorpius Enterprise}
      - VITE_KEYCLOAK_URL=${VITE_KEYCLOAK_URL:-http://localhost:8090}
    depends_on:
      - api-gateway
    networks:
      - scorpius-network
    restart: unless-stopped

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: scorpius-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - scorpius-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: scorpius-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - scorpius-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # =============================================================================
  # ADMIN TOOLS
  # =============================================================================

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: scorpius-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@scorpius.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - scorpius-network
    restart: unless-stopped

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: scorpius-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-scorpius123}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - scorpius-network
    restart: unless-stopped

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  scorpius-network:
    driver: bridge
    name: scorpius-enterprise-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    name: scorpius-postgres-data
  redis_data:
    name: scorpius-redis-data
  keycloak_data:
    name: scorpius-keycloak-data
  prometheus_data:
    name: scorpius-prometheus-data
  grafana_data:
    name: scorpius-grafana-data
  pgadmin_data:
    name: scorpius-pgadmin-data
  time_machine_data:
    name: scorpius-time-machine-data
  reporting_data:
    name: scorpius-reporting-data
