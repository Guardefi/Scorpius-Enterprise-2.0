version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scorpius-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: scorpius
      POSTGRES_USER: scorpius
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scorpius_dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - scorpius-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scorpius"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: scorpius-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - scorpius-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: scorpius-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://scorpius:${POSTGRES_PASSWORD:-scorpius_dev_password}@postgres:5432/scorpius

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379/0

      # Security
      SECRET_KEY: ${SECRET_KEY:-dev_secret_key_change_in_production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7

      # CORS
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3004,http://frontend:3004

      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      # Email
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

      # App
      DEBUG: ${DEBUG:-false}

    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app:ro # Development: mount source for hot reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scorpius-frontend
    restart: unless-stopped
    ports:
      - "3004:3004"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - scorpius-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3004/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: scorpius-prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - scorpius-network
    profiles:
      - monitoring

  # Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: scorpius-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - scorpius-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  scorpius-network:
    driver: bridge
    name: scorpius-network
